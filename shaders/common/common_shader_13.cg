// profile sce_vp_psp2

#if defined(LIGHTMAP) || defined(CG_FOG)
	#define DIFFUSE
#endif

#define IRRADIANCE

uniform float4x4 WorldViewProjectionMatrix;
uniform float4x4 WorldViewT;

uniform float4x4 matWorldIT;
uniform float4x4 matviewi;
uniform float4x4 matworldi;
uniform float4x4 matWorldT;
uniform float fresnelPower;
uniform float4 minReflectionAmount;
uniform float4 maxReflectionAmount;

uniform float2 fogstartend;

uniform float4 cAr;
uniform float4 cAg;
uniform float4 cAb;
uniform float4 cBr;
uniform float4 cBg;
uniform float4 cBb;
uniform float3 cC;
uniform float minIrradiance;

float3 irradiance(float3 normal3)
{
	float4 normal = float4(normal3, 1.0);
	normal.z = -normal.z;

	float3 x1, x2, x3;

	// Linear + constant polynomial terms
	x1.r = dot(cAr,normal);
	x1.g = dot(cAg,normal);
	x1.b = dot(cAb,normal);

	// 4 of the quadratic polynomials
	float4 vB = normal.xyzz * normal.yzzx;
	x2.r = dot(cBr,vB);
	x2.g = dot(cBg,vB);
	x2.b = dot(cBb,vB);

	// Final quadratic polynomial
	float vC = normal.x*normal.x - normal.y*normal.y;
	x3 = cC.rgb * vC;

	return x1 + x2 + x3;
}



void main(
	float4 Vertex,
	float3 Normal,
	float2 TexCoord0,
	float2 TexCoord1,
	float2 TexCoord2,
	float2 out vCoordDiffuse : TEXCOORD1,
	float2 out vCoordLightMap : TEXCOORD2,
	float2 out vCoordReflectionMap : TEXCOORD3,
	float4 out vDebug : TEXCOORD4,
	float3 out eyeDirection : TEXCOORD6,
	float3 out vReflection : TEXCOORD7,
	float3 out vReflectionAmount : TEXCOORD8,
	float out fogFactor : TEXCOORD9,
	float4 out gl_Position : POSITION,
	float out gl_PointSize : PSIZE
) {
	gl_PointSize = 1.0f;
	gl_Position = mul(Vertex, WorldViewProjectionMatrix);
#ifdef DIFFUSE
	vCoordDiffuse = TexCoord0;
#endif
#ifdef LIGHTMAP
	vCoordLightMap = TexCoord1;
#endif
#ifdef REFLECTIONMAP
	vCoordReflectionMap = TexCoord2;
#endif

	float3 normal = mul(float4(Normal,0), matWorldIT).xyz;

	// Eye direction
	float4 eyePosition = mul(matviewi[3], matworldi);
	float3 _eyeDirection = normalize(eyePosition.xyz - Vertex.xyz);
	_eyeDirection = mul(float4(_eyeDirection,0), matWorldIT).xyz;

	// Reflection
	vReflection = normalize(reflect(_eyeDirection, normal));
	eyeDirection = _eyeDirection;

	// Amount
	float fresnel = 1.0-clamp(-dot(vReflection, normal),0.0,1.0);
	fresnel = pow(fresnel, fresnelPower);
	float4 reflectionAmount = lerp(minReflectionAmount, maxReflectionAmount, fresnel);
#ifdef IRRADIANCE
	reflectionAmount.a *= clamp(dot(irradiance(normal),float3(0.3,0.6,0.1)),minIrradiance,1.0);
#endif
	vReflectionAmount = reflectionAmount.rgb * reflectionAmount.a;

#ifdef CG_FOG
	float depth = dot(WorldViewT[2], Vertex);
	fogFactor = clamp((depth - fogstartend[0])/(fogstartend[1] - fogstartend[0]), 0.0, 1.0);
#endif

}
